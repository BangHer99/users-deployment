// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	users "be12/deploy/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the DataInterface type
type UserData struct {
	mock.Mock
}

// CreateData provides a mock function with given fields: data
func (_m *UserData) CreateData(data users.UserCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(users.UserCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.UserCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelData provides a mock function with given fields: param
func (_m *UserData) DelData(param int) (int, error) {
	ret := _m.Called(param)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *UserData) SelectAll() ([]users.UserCore, error) {
	ret := _m.Called()

	var r0 []users.UserCore
	if rf, ok := ret.Get(0).(func() []users.UserCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.UserCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: param
func (_m *UserData) SelectById(param int) (users.UserCore, error) {
	ret := _m.Called(param)

	var r0 users.UserCore
	if rf, ok := ret.Get(0).(func(int) users.UserCore); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(users.UserCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: param, data
func (_m *UserData) UpdateData(param int, data users.UserCore) (int, error) {
	ret := _m.Called(param, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, users.UserCore) int); ok {
		r0 = rf(param, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, users.UserCore) error); ok {
		r1 = rf(param, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
